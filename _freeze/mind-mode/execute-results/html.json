{
  "hash": "304c2c53f9b27efd855c33e676621163",
  "result": {
    "engine": "knitr",
    "markdown": "# Mindless Modeling (TODO) {#sec-mind-mode}\n\nExcellent reproducibility paper: https://reproducible.cs.princeton.edu/\nfeature leakage, model sheets\n\nIllusion of progress: https://arxiv.org/pdf/math/0606441.pdf\n\n## Features\n\nRatio Variables: https://journals.sagepub.com/doi/abs/10.1177/1094428118773455?journalCode=orma\n\n\n### Engineering the wrong features\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n<!--\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(tidyr)\nlibrary(ggplot2)\nset.seed(123)\n\n# set up data ----\nn <- 2000\ndf <-\ndata.frame(\n  x1 = runif(n),\n  x2 = runif(n),\n  x3 = runif(n)\n)\ndf$y1 <- 10*df$x1 + rnorm(n)\ndf$y2 <- 10*(df$x1)**2 + rnorm(n)\ndf$y3 <- 10*(df$x1 / df$x2) + rnorm(n)\ndf$y4 <- df$y3 + 0.5*df$x3\n\ndf_test <- df[1001:2000,]\ndf <- df[1:1000,]\n\n# model fits ----\nlr <- \n  linear_reg() %>%\n  set_engine(\"lm\") %>%\n  set_mode(\"regression\")\ndt <- \n  decision_tree() %>%\n  set_engine(\"rpart\") %>%\n  set_mode(\"regression\")\nrf <- \n  rand_forest() %>%\n  set_engine(\"randomForest\") %>%\n  set_mode(\"regression\")\nmodels <- list(lr, dt, rf)\nformulas <- list(\n  y1 ~ x1,\n  y1 ~ I(x1**2),\n  y2 ~ x1,\n  y2 ~ I(x1**2),\n  y3 ~ x1 + x2,\n  y3 ~ I(x1/x2),\n  y4 ~ x1 + x2 + x3,\n  y4 ~ I(x1/x2) + x3\n)\nfml_target <- vapply(formulas, function(x) as.character(eval(x)[[2]]), character(1))\nfml_rhs <- vapply(formulas, function(x) paste(labels(terms(x)), collapse = \" + \"), character(1))\n\nformulas_df <- tibble(\n  formulas = formulas, \n  target = fml_target,\n  formula_desc = fml_rhs\n)\nmodels_df <- tibble(\n  model_desc = factor(c(\"linear\", \"decision tree\", \"random forest\"),\n                      levels = c(\"linear\", \"decision tree\", \"random forest\")),\n  models = models\n)\ntargets_df <- tibble(\n  target = paste0(\"y\", 1:4),\n  target_true_spec = c(\"linear\", \"quadratic\", \"ratio\", \"ratio plus linear\")\n)\n\n# model predictions ----\nmodels_formulas_fits <-\ntidyr::crossing(models_df, formulas_df) %>%\n  left_join(targets_df, by = \"target\") %>%\n  rowwise() %>%\n  mutate(\n    target = as.character(eval(formulas)[[2]]),\n    fits = list(fit(models, formulas, data = df)),\n    preds = list(predict(fits, new_data = df_test)[[\".pred\"]]),\n    mse = sqrt(sum(preds - df_test[[target]])**2)\n    )\n\nmodels_formulas_fits <- \n    models_formulas_fits %>%\n    group_by(model_desc) %>%\n    mutate(mse_factor = mse / min(mse))\n\n# plot results ----\nggplot(data = models_formulas_fits) +\n  aes(x = model_desc, y = mse, col = formula_desc) +\n  geom_point() + \n  facet_wrap(target_true_spec ~ ., ncol = 1, scales = \"free\") +\n  theme(\n    axis.title = element_blank()\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_rec <- recipe(x = df, formula = y1 ~ x1)\n\ntune_spec <- rand_forest(\n  mtry = tune(),\n  trees = 1000,\n  min_n = tune()\n) %>%\n  set_mode(\"regression\") %>%\n  set_engine(\"ranger\")\n\ntune_wf <- \n  workflow() %>%\n  add_recipe(tree_rec) %>%\n  add_model(tune_spec)\n\nset.seed(123) \ntrees_fold <- vfold_cv(df)\n\nset.seed(456)\ntune_res <- tune_grid(\n  tune_wf,\n  resamples = trees_fold,\n  grid = 20\n)\n\nfinal_rf <-\n  finalize_model(\n    tune_spec,\n    select_best(tune_res, metric = \"rmse\")\n  )\n\nfinal_res <-\n  final_rf %>%\n  set_engine(\"ranger\", importance = \"permutation\") %>%\n  fit(formula = y1 ~ x1, data = df)\n\npredict(final_res, new_data = df_test)\n```\n:::\n\n\n--> \n\n## Targets\n\n## Evaluation Metrics \n\n## Unsupervised Learning\n\n## Lifecycle Management\n\n<!--\n\nWe talk about the _FOO_ method\\index{FOO} in this chapter.\n\n## Chosing the right target\n\nHow you chose to model depends not just on your target variable and the relationships in your data but also the question to be answered. For example, [@murray2020] describes how the \"best\" approach to forecasting case growth in a pandemic varies depending on whether the goal is to plan population-level interventions and policies or organize short-term hospital capacity.\n\n## Developing meaningful features\n\n\n\n## Selecting an algorithm\n\n## Evaluating the right performance metrics\n\n## Strategies\n\n-->\n\n## Fair and Ethical Modeling\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}